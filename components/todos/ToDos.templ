package todos

import "fmt"
import "github.com/google/uuid"


templ deleteIcon() {
<image src="/assets/delete.svg" class="delete-icon" @click="await db.removeItem(id).then(console.log); active = false">
</image>
}
func textXData(id uuid.NullUUID)string{
var uID uuid.UUID
if id.Valid {
uID = id.UUID
}else{
uID = uuid.New()
}
return fmt.Sprintf(`{
type : 'text',
id: '%v',
active : true,
title : '' ,
text : '',
async init(){
let data = await db.getItem('%v')
if (data){
this.title = data.title
this.text = data.text
}
},
}` , uID, uID )
}

templ TextToDo(id uuid.NullUUID) {
<section id="ajax-target">
    <div class="todo-container grid grid-cols-3 grid-rows-1 " x-data={textXData(id)}
        x-init="$watch('$data',data =>data.active && db.storeItem(data))" x-show="active">
        @deleteIcon()
        <input class="p-small h2 col-span-1" type="text" placeholder="Title" x-model="title">
        <textarea @change="text=$el.value" class="p-small h3 col-span-2" placeholder="Type your text here"
            x-model="text"></textarea>
    </div>
</section>
}

func checklistXData(id uuid.NullUUID)string{
var uID uuid.UUID
if id.Valid {
uID = id.UUID
}else{
uID = uuid.New()
}
return fmt.Sprintf(`{
type : 'checklist',
id: '%v',
title : '' ,
active : true,
list: [{title : '' , done : false , key : 0 }],
async init(){
let data = await db.getItem('%v')
if (data){
this.title = data.title
this.list = data.list
}
}
}` , uID, uID )
}

templ CheckListToDo(id uuid.NullUUID) {
<section id="ajax-target">
    <div class="todo-container flex flex-row flex-wrap" x-data={checklistXData( id)}
        x-init="$watch('$data',data => data.active && db.storeItem(data))" x-show="active">
        @deleteIcon()
        <input class="p-smaller h2 col-span-1 w-full" type="text" placeholder="Title" x-model="title">
        <template x-for="(task , key) in list">
            <div class="w-1/3 flex flex-row items-center" x-effet="list[k]=task">
                <input @change="task.title=$el.value" type="text" class="p-small h2" x-init="$el.value=task.title"
                    placeholder="Task">
                <image @click="task.done=!task.done" :src="task.done ? '/assets/done.svg' : '/assets/notdone.svg'">
                </image>
                <image @click="list = list.filter(e=>e.k!==task.k)" src="/assets/delete.svg"></image>
            </div>
        </template>
        <div class="w-1/3" @click="list.push({title : '' , done : false, k : list.length })">
            <h2 class="p-small">New task</h2>
        </div>
    </div>
</section>
}

func imageXData(id uuid.NullUUID) string{
var uID uuid.UUID
if id.Valid {
uID = id.UUID
}else{
uID = uuid.New()
}
return fmt.Sprintf(`{
type : 'image',
id: '%v',
title : '' ,
active : true,
base:'' ,
overlay: '',
async init(){
let data = await db.getItem('%v')
if (data){
this.title = data.title
this.base = data.base
this.overlay = data.overlay
}
}
}`,uID , uID )
}

templ ImageToDo(id uuid.NullUUID) {
<section id="ajax-target">
    <div class="todo-container grid grid-cols-3 grid-rows-1" x-data={imageXData(id)}
        x-init="$watch('$data', data => data.active && db.storeItem(data))" x-show="active">
        @deleteIcon()
        <div class="col-span-1 p-small flex flex-col justify-around">
            <input class="p-smaller h2" type="text" placeholder="Title" x-model="title">
            <input class="p-smaller h2" type="file" accept="image/*"
                @change="async () =>base = await fileToB64($el.files[0]) ">
            <button class="button" @click="overlay=''; clearCanvas(id) ">Clear</button>
            <input type="range" min="1" max="20" step="1" value="2" name="linewidth" x-ref="linewidth"
                @change="setCanvasSettings(id,$el.value)">
            <label for="linewidth">Linewidth </label>
            <input type="color" name="color" value="#000000" @change="setCanvasSettings(id,null,$el.value)">
            <label for="color">Color</label>
        </div>
        <div class="col-span-2 p-small">
            <div class="drawing-area">
                <image class="drawing-element" style="z-index: 1;" :src="base"></image>
                <canvas class="drawing-element" style="z-index: 2;" :id="id"
                    x-init=" async ()=> {await init(); initCanvas(id , $data.overlay , (k)=>{overlay=k})}"></canvas>
            </div>
        </div>

    </div>
</section>
}